name: CI/CD Pipeline for Kubernetes Deployment

on:
  push:
    branches:
      - main  # Trigger workflow on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Step 3: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: kubectl

      # Step 4: Build Docker image
      # - name: Build Docker image
      #   run: |
      #     docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/backendapp:latest -f Dockerfile .


      # Step 5: Push Docker image to GCR
      # - name: Debug Key Content
      #   run: |
      #     echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > /tmp/key.json
      #     cat /tmp/key.json


      #echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > /tmp/key.json
      #gcloud auth activate-service-account --key-file=/tmp/key.json
      
      - name: Authenticate Docker with GCR
        run: |
          gcloud auth configure-docker gcr.io

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/backendapp:latest

      # Step 6: Apply Kubernetes ConfigMap
      - name: Apply ConfigMap
        run: |
          kubectl apply -f ./k8s/configmap.yaml --namespace=ica4backend

      # Step 7: Apply Kubernetes Deployment
      - name: Apply Deployment
        run: |
          kubectl apply -f ./k8s/deployment.yaml --namespace=ica4backend

      # Step 8: Verify Deployment
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/backendapp --namespace=ica4backend
